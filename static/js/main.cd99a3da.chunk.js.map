{"version":3,"sources":["utils/Utils.js","component/BlunkDiv.js","component/GameFrame.js","App.js","serviceWorker.js","index.js"],"names":["getIndexOfElement","array","element","length","i","j","toString","x","y","Error","BlunkDiv","props","style","backgroundColor","children","GameFrame","moveElement","e","clickedItemValue","target","innerHTML","elements","state","elem","coord","blunkCoor","BLUNK","siblings","leng","coor","filter","getSiblings","includes","map","JSON","stringify","arra","firstCoor","secondCoor","temp","moveItems","setState","oldState","oldProps","moveCount","checkWinCondition","w","WIN_ARRAY","win","startAgain","shuffledArray","shuffle","INITIAL_ARRAY","chunk","jsxElements","this","row","item","push","key","onClick","className","getDivsFromArray","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd99a3da.chunk.js","sourcesContent":["\n\nexport function getIndexOfElement(array, element) {\n\n    const length = array.length;\n\n    for (let i = 0; i < length; i++) {\n        for (let j = 0; j < length; j++) {\n            if (array[i][j].toString() === element.toString()) {\n                return {\n                    x: i,\n                    y: j\n                };\n            }\n        }\n    }\n    throw new Error(\"no element fount \" + element);\n}\n\nexport function getSiblings(array, x, y) {\n    const leng = array.length;\n    let coor = [{ x: x, y: y + 1 }, { x: x, y: y - 1 }, { x: x + 1, y: y }, { x: x - 1, y: y }];\n    coor = coor.filter(e => e.x >= 0 && e.x < leng);\n    coor = coor.filter(e => e.y >= 0 && e.y < leng);\n    return coor;\n}\n\nexport function moveItems(arra, firstCoor, secondCoor) {\n\n    const temp = arra[firstCoor.x][firstCoor.y];\n    arra[firstCoor.x][firstCoor.y] = arra[secondCoor.x][secondCoor.y];\n    arra[secondCoor.x][secondCoor.y] = temp;\n}","import React from 'react'\n\nexport default function BlunkDiv(props) {\n\n    return (\n        <div style={{\n            backgroundColor: '#84e19b'\n        }}>\n            {props.children}\n        </div>\n    )\n}\n","import React, { Component } from 'react'\nimport './GameFrame.css';\nimport { getIndexOfElement, getSiblings, findItem, moveItems } from '../utils/Utils';\nimport BlunkDiv from './BlunkDiv';\nimport { chunk, includes, shuffle, } from 'lodash';\n\nexport default class GameFrame extends Component {\n\n\n    static BLUNK = '';\n    static INITIAL_ARRAY = [\n        1, 2, 3, 4,\n        5, 6, 7, 8,\n        9, 10, 11, 12,\n        13, 14, GameFrame.BLUNK, 15];\n\n    static WIN_ARRAY = [\n        [1, 2, 3, 4],\n        [5, 6, 7, 8],\n        [9, 10, 11, 12],\n        [13, 14, 15, GameFrame.BLUNK]\n    ];\n\n    constructor(props) {\n        super(props);\n        const elements = chunk(GameFrame.INITIAL_ARRAY, 4);\n        this.state = {\n            elem: elements,\n            win: false,\n            moveCount: 0\n        };\n    }\n\n    moveElement = (e) => {\n        let clickedItemValue = e.target.innerHTML;\n        const elements = this.state.elem;\n        let coord = getIndexOfElement(elements, clickedItemValue);\n        let blunkCoor = getIndexOfElement(elements, GameFrame.BLUNK);\n        const siblings = getSiblings(elements, coord.x, coord.y);\n\n        const isblukSibling = includes(siblings.map(e => JSON.stringify(e)), JSON.stringify(blunkCoor));\n        if (isblukSibling) {\n            moveItems(elements, coord, blunkCoor);\n\n            this.setState((oldState, oldProps) => {\n                return {\n                    elem: elements,\n                    moveCount: oldState.moveCount + 1\n                }\n            });\n            this.checkWinCondition();\n        }\n    }\n\n    checkWinCondition = () => {\n        let w = JSON.stringify(this.state.elem) === JSON.stringify(GameFrame.WIN_ARRAY);\n        this.setState({\n            win: w\n        })\n\n    }\n    startAgain = () => {\n        const shuffledArray = shuffle(GameFrame.INITIAL_ARRAY);\n        const elements = chunk(shuffledArray, 4);\n\n        this.setState({\n            win: false,\n            elem: elements,\n            moveCount: 0\n        });\n    }\n\n    getDivsFromArray() {\n        const jsxElements = [];\n        for (let row of this.state.elem) {\n            for (let item of row) {\n                if (item === GameFrame.BLUNK) {\n                    jsxElements.push(<BlunkDiv key={item} onClick={this.moveElement} >{item}</BlunkDiv>);\n                } else {\n                    jsxElements.push(<div key={item} onClick={this.moveElement} >{item}</div>);\n                }\n            }\n        }\n\n        return jsxElements;\n    }\n\n    render() {\n        if (this.state.win) {\n            return (\n                <div className=\"winFrame\">\n                    <div> Win !!!  Move count {this.state.moveCount}</div>\n                    <button className=\"grnButton\" onClick={this.startAgain}>Start again</button>\n                </div>\n            )\n        } else {\n            let jsxElements = this.getDivsFromArray();\n            return (\n                <div className=\"Refresh\">\n                    <button className=\"grnButton\" onClick={this.startAgain}>Refresh</button>\n                    <div> Count of Moves  {this.state.moveCount}</div>\n                    <div className=\"mainFrame\">\n                        {jsxElements}\n                    </div>\n                </div>\n            )\n        }\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport GameFrame from './component/GameFrame';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GameFrame></GameFrame>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}